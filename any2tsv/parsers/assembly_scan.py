"""
Example usage: any2tsv assembly-scan assembly-scan.json > assembly-scan.tsv

Example input:
```{bash}
{
    "contig_non_acgtn": "0.00",
    "contig_percent_a": "23.97",
    "contig_percent_c": "21.48",
    "contig_percent_g": "23.28",
    "contig_percent_n": "0.00",
    "contig_percent_t": "31.27",
    "contigs_greater_100k": 0,
    "contigs_greater_10k": 0,
    "contigs_greater_1k": 1,
    "contigs_greater_1m": 0,
    "l50_contig_count": 1,
    "max_contig_length": 5386,
    "mean_contig_length": 5386,
    "median_contig_length": 5386,
    "min_contig_length": 5386,
    "n50_contig_length": 5386,
    "num_contig_non_acgtn": 0,
    "percent_contigs_greater_100k": "0.00",
    "percent_contigs_greater_10k": "0.00",
    "percent_contigs_greater_1k": "100.00",
    "percent_contigs_greater_1m": "0.00",
    "total_contig": 1,
    "total_contig_length": 5386
}
```

Example output (transposed with csvtk for readability):
```{bash}
any2tsv assembly-scan assembly-scan.json | csvtk transpose -t
filename        assembly-scan.json
contig_non_acgtn        0.00
contig_percent_a        23.97
contig_percent_c        21.48
contig_percent_g        23.28
contig_percent_n        0.00
contig_percent_t        31.27
contigs_greater_100k    0
contigs_greater_10k     0
contigs_greater_1k      1
contigs_greater_1m      0
l50_contig_count        1
max_contig_length       5386
mean_contig_length      5386
median_contig_length    5386
min_contig_length       5386
n50_contig_length       5386
num_contig_non_acgtn    0
percent_contigs_greater_100k    0.00
percent_contigs_greater_10k     0.00
percent_contigs_greater_1k      100.00
percent_contigs_greater_1m      0.00
total_contig    1
total_contig_length     5386
```
"""
import json
from os.path import basename
__name__ = "assembly-scan"
__description__ = "Generate basic stats for an assembly"

def parse(input_file: str) -> dict:
    """
    A function to parse a JSON file generated by [assembly-scan](https://github.com/rpetit3/assembly-scan)

    Args:

    `input_file`: A filepath to the `assembly-scan` output file.

    Returns:

    A dictionary containing the values in the JSON file.
    """
    with open(input_file, 'rt') as f:
        data = json.load(f)
    return {'filename': basename(input_file), **data}
